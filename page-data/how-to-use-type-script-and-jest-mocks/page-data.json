{"componentChunkName":"component---src-templates-post-js","path":"/how-to-use-type-script-and-jest-mocks","webpackCompilationHash":"6b264892067f4516d7fe","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2019-07-10\",\n  \"title\": \"How to use TypeScript and Jest mocks\",\n  \"categories\": [\"Jest\", \"TypeScript\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"It's pretty common to mock modules in Jest. When using TypeScript that might be a bit harder because they are not automatically resolved by TypeScript.\"), mdx(\"p\", null, \"Let's say we are using a function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useFooContext\"), \" from a module called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foo\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// foo.d.ts\\ndeclare module \\\"foo\\\" {\\n  interface FooContext {\\n    bar: number;\\n  }\\n\\n  export function useFooContext(): FooContext;\\n}\\n\")), mdx(\"p\", null, \"So we create a mock of the module \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foo\"), \" in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__mocks__\"), \" folder:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// __mocks__/foo.ts\\nexport const useFooContext = jest.fn(() => {});\\n\")), mdx(\"p\", null, \"And finally, create our test file using mocked \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foo\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"{5,6}\",\n    \"{5,6}\": true\n  }), \"// index.test.ts\\nimport { useFooContext } from \\\"foo\\\";\\n\\ntest(\\\"sample test\\\", () => {\\n  // Error: Property 'mockImplementation' does not exist on type '() => FooContext'.ts(2339)\\n  useFooContext.mockImplementation(() => {\\n    bar: 123;\\n  });\\n\\n  const context = useFooContext();\\n\\n  expect(context.bar).toBe(123);\\n});\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Property 'mockImplementation' does not exist on type '() => FooContext'.ts(2339)\")), mdx(\"p\", null, \"TypeScript throws an error since it doesn't resolve mock files as Jest does. It expects \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useFooContext\"), \" to have the type defined in its definition.\"), mdx(\"h3\", {\n    \"id\": \"solution\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#solution\",\n    \"aria-label\": \"solution permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Solution\"), mdx(\"p\", null, \"We should hint TypeScript that the function imported is in fact a jest mock function.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import {\\n  useFooContext,\\n  FooContext // Get the type returned by `useFooContext`\\n} from \\\"foo\\\";\\n\\n// Create a new variable and type it as jest.Mock passing the type\\nconst mockedUseFooContext = useFooContext as jest.Mock<FooContext>;\\n\\ntest(\\\"sample test\\\", () => {\\n  // TypeScript will type check the value returned by the mock implementation \\uD83D\\uDCAF\\n  mockedUseFooContext.mockImplementation(() => {\\n    bar: \\\"mocked return for this test\\\";\\n  });\\n\\n  const context = mockedUseFooContext();\\n\\n  expect(context.bar).toBe(123);\\n});\\n\")), mdx(\"p\", null, \"I hope that's helpful!\"));\n}\nMDXContent.isMDXComponent = true;","fields":{"editLink":"https://github.com/klzns/klzns.github.io/edit/master/blog/2019-07-10/index.mdx"},"excerpt":"It's pretty common to mock modules in Jest. When using TypeScript that might be a bit harder because they are not automatically resolved byâ€¦","frontmatter":{"title":"How to use TypeScript and Jest mocks","date":"2019-07-10","categories":["Jest","TypeScript"]},"timeToRead":1,"parent":{"__typename":"File","mtime":"2019-07-10T04:16:03.814Z","birthtime":"2019-07-10T01:05:35.281Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/how-to-use-type-script-and-jest-mocks","prev":{"fileAbsolutePath":"C:/Users/breno/Projects/blog/blog/2018-01-05/index.mdx","fields":{"slug":"/react-live-code-example"},"frontmatter":{"title":"React-Live & Code example","categories":["Coding","Help"]}},"next":null}}}