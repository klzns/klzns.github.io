{"version":3,"sources":["webpack:///./src/templates/post.js","webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js"],"names":["Title","styled","h1","PostContent","div","textAlign","marginLeft","marginRight","Post","pageContext","slug","prev","next","postNode","data","mdx","post","frontmatter","blogPostUrl","config","siteUrl","customSEO","postPath","article","title","date","timeToRead","categories","map","cat","i","Fragment","key","to","kebabCase","body","target","rel","href","encodeURIComponent","fields","editLink","defaultProps","PropTypes","shape","postQuery","MDXRenderer","require","module","React","useMDXComponents","useMDXScope","scope","components","children","props","mdxComponents","mdxScope","End","fullScope","keys","Object","values","fn"],"mappings":"sRAUMA,EAAQC,IAAOC,GAAV,8DAAGD,CAAH,yBAILE,EAAcF,IAAOG,IAAV,oEAAGH,CAAH,sB,qFA6BD,CAACI,UAAW,U,2FAYP,CAACC,WAAY,GAAIC,YAAa,KArC7CC,EAAO,SAAC,GAAoE,IAAD,IAAjEC,YAAeC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,KAAqBC,EAAiB,EAA9BC,KAAQC,IACnDC,EAAOH,EAASI,YAEhBC,EAAW,GAAMC,IAAOC,QAAUV,EAExC,OACE,kBAAC,IAAD,CAAQW,WAAS,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,SAAUZ,EAAMG,SAAUA,EAAUU,SAAO,IAChD,kBAAC,IAAD,MACA,iCACE,kBAACvB,EAAD,KAAQgB,EAAKQ,OACb,kBAAC,IAAD,KACGR,EAAKS,KADR,MACuBZ,EAASa,WADhC,iBACgE,IAC7DV,EAAKW,WAAWC,KAAI,SAACC,EAAKC,GAAN,OACnB,kBAAC,IAAMC,SAAP,CAAgBC,IAAKH,KAChBC,GAAK,KACR,kBAAC,OAAD,CAAMG,GAAE,eAAiBC,IAAUL,IAASA,QAIlD,kBAAC1B,EAAD,KACE,kBAAC,cAAD,KAAcU,EAASsB,QAG3B,yBACE,uBACEC,OAAO,SACPC,IAAI,sBAGJC,KAAI,uCAAyCC,mBAC3CrB,IANJ,sBAWA,gCACA,uBAAGkB,OAAO,SAASC,IAAI,sBAAsBC,KAAMzB,EAAS2B,OAAOC,UAAnE,wBAIF,kBAAC,IAAD,CAAU9B,KAAMA,EAAMC,KAAMA,OAMrBJ,YAafA,EAAKkC,aAAe,CAClBjC,YAAakC,IAAUC,MAAM,CAC3BhC,KAAM,KACND,KAAM,QAIH,IAAMkC,EAAS,c,uBChFtB,IAAMC,EAAcC,EAApB,QAEAC,UAAiB,CACfF,YAAaA,I,qrECTf,IAAMG,EAAQF,EAAd,Q,EACkCA,EAAQ,QAAlCG,E,EAAAA,iBAAkBnC,E,EAAAA,IAClBoC,EAAgBJ,EAAQ,QAAxBI,YAERH,UAAiB,SAAqB,GAKlC,IAJFI,EAIC,EAJDA,MACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,SACGC,E,oIACF,sCACKC,EAAgBN,EAAtB,GACMO,EAAWN,EAFhB,GAKKO,EAAMT,EAAA,SAAc,WACxB,MACE,OAAO,KAGT,IAAMU,EAAS,GAGbV,MAHa,EAIblC,OAJF,GAQM6C,EAAOC,YAAb,GACMC,EAASF,EAAA,KAAS,SAAA5B,GAAG,OAAI2B,EAAJ,MAG3B,OAFQ,mCAAR,KAEOI,2BAAP,OACC,CAACT,EAlBJ,IAoBA,OAAOL,EAAA,mBAA2BI,WAAYG,GAA9C","file":"component---src-templates-post-js-cdbcc62cb7595b6d998b.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\nimport styled from 'styled-components'\nimport kebabCase from 'lodash/kebabCase'\nimport { MDXRenderer } from 'gatsby-plugin-mdx'\nimport config from '../../config'\n\nimport { Layout, Wrapper, Header, Subline, SEO, PrevNext } from '../components'\n\nconst Title = styled.h1`\n  margin-bottom: 1rem;\n`\n\nconst PostContent = styled.div`\n  margin-top: 4rem;\n`\n\nconst Post = ({ pageContext: { slug, prev, next }, data: { mdx: postNode } }) => {\n  const post = postNode.frontmatter\n\n  const blogPostUrl = `${config.siteUrl}${slug}`\n\n  return (\n    <Layout customSEO>\n      <Wrapper>\n        <SEO postPath={slug} postNode={postNode} article />\n        <Header />\n        <article>\n          <Title>{post.title}</Title>\n          <Subline>\n            {post.date} &mdash; {postNode.timeToRead} Min Read &mdash; In{' '}\n            {post.categories.map((cat, i) => (\n              <React.Fragment key={cat}>\n                {!!i && ', '}\n                <Link to={`/categories/${kebabCase(cat)}`}>{cat}</Link>\n              </React.Fragment>\n            ))}\n          </Subline>\n          <PostContent>\n            <MDXRenderer>{postNode.body}</MDXRenderer>\n          </PostContent>\n        </article>\n        <p css={{textAlign: 'right'}}>\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            // using mobile.twitter.com because if people haven't upgraded\n            // to the new experience, the regular URL wont work for them\n            href={`https://mobile.twitter.com/search?q=${encodeURIComponent(\n              blogPostUrl,\n            )}`}\n          >\n            Discuss on Twitter\n          </a>\n          <span css={{marginLeft: 10, marginRight: 10}}>{` â€¢ `}</span>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href={postNode.fields.editLink}>\n            Edit post on GitHub\n          </a>\n        </p>\n        <PrevNext prev={prev} next={next} />\n      </Wrapper>\n    </Layout>\n  )\n}\n\nexport default Post\n\nPost.propTypes = {\n  pageContext: PropTypes.shape({\n    slug: PropTypes.string.isRequired,\n    next: PropTypes.object,\n    prev: PropTypes.object,\n  }),\n  data: PropTypes.shape({\n    mdx: PropTypes.object.isRequired,\n  }).isRequired,\n}\n\nPost.defaultProps = {\n  pageContext: PropTypes.shape({\n    next: null,\n    prev: null,\n  }),\n}\n\nexport const postQuery = graphql`\n  query postBySlug($slug: String!) {\n    mdx(fields: { slug: { eq: $slug } }) {\n      body\n      fields {\n        editLink\n      }\n      excerpt\n      frontmatter {\n        title\n        date(formatString: \"YYYY-MM-DD\")\n        categories\n      }\n      timeToRead\n      parent {\n        ... on File {\n          mtime\n          birthtime\n        }\n      }\n    }\n  }\n`\n","/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n"],"sourceRoot":""}